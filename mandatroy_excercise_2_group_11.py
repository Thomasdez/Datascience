# -*- coding: utf-8 -*-
"""Mandatroy excercise 2 - group 11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p_P63W9sHK3TKzufF1IFSgjYlDDAslc6

Downloading pandas, numpy and connecting to drive

# Data Management and Visualization Mandatory Assignent 2
## Group members:
Amitai Josef Paz Iversen

Agust Bjerg-Heise

Thomas Rald Kaspersen

Valdemar Hedegaard
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

"""
Put dataset into dataframe
"""

APdf=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/CSV files/AnesPolitics1996.csv')

"""# **1. Basic Dataframes**

**1a. How many observations are in the data frame?**
"""

"""
The len function is used to find the number of rows (axes[0])
"""

rows = len(APdf.axes[0])
print("Number of Rows: " + str(rows))

"""**1b. How many variables are measured (how many columns)?**"""

"""
the len function is used to find the number of columns (axes[1])
"""

columns = len(APdf.axes[1])
print("Number of Columns: " + str(columns))

"""**1c. What is the age of the youngest person in the data? The oldest?**"""

"""
The min function is used on the 'age' colum
The max function is used on the 'age column
"""
youngest=APdf['age'].min()
oldest=APdf['age'].max()

"""
The youngest variable is passed into a print function to print result
"""

print("The youngest person in the data set is " + str(youngest) + " years old")

"""
The oldest variable is passed into a print function to print result
"""
print("The oldest person in the data set is " + str(oldest) + " years old")

"""**1d. How many days a week does the average respondent watch TV news (round to
the nearest tenth)?**
"""

"""
The mean function is used on the 'TVnews' column to find the average watch time.
The round function is used to round the number to the nearest tenth
"""

avrgWatchTime = round(APdf['TVnews'].mean(),1)

"""
The avrgWatchTime variable is passed into a print function to print out the result
"""

print("The average respondent watches TV news " + str(avrgWatchTime) + " days a week")

"""**1e. Check for missing values. Are there any?**"""

"""
The missing variable is assigned as a new df with only blank values from all
columns and rows in the APdf dataframe

"""

missing = APdf.isnull().values.any()

"""
The missing variable is passed into a print function to print out the result.
The print function is added into a if statement to change the printed message
depending on if there are missing values or not
"""

if missing:
    print("There are missing values in the data set")
else:
    print("There are no missing values in the data")

"""# **2. Data Pre-processing**

2a. Rename the educ column education.
"""

"""
The rename function is used to rename the column 'educ' to 'education'
"""

APdf = APdf.rename(columns = {'educ':'education'})

"""
To check if the column is renamed
"""
APdf.head(1)

"""2b. Create a new column called party based on each respondent's answer to PID.
party should equal Democrat if the respondent selected either Strong Democrat or
Weak Democrat. party will equal Republican if the respondent selected Strong or
Weak Republican for PID and Independent if they selected anything else.
"""

"""
We create a custom function that returns a value depending on the value of the
PID variable. From the dataset dictionary we identified that in the PID
column 0 = Strong Democrat, 1 = Weak Democrat, 5 = Strong Republican,
6 = Weak Republican, and anything inbetween equals independent in some way.
"""

def partyfunc(PID):
  if PID == 0 or PID == 1:
    return 'Democrat'
  elif PID == 5 or PID == 6:
    return 'Republican'
  else:
    return 'Independent'

"""
The function is called in and apply function to add the values to the new column
 called party
"""

APdf['party'] = APdf['PID'].apply(partyfunc)


"""
Head(10) is used to get the first 10 rows of the dataset to insure that the
values in the columns are added as they should be

"""
APdf.head(10)

"""2c. Create a new column called age_group that buckets respondents into the
following categories based on their age: 18-24, 25-34, 35-44, 45-54, 55-64, and 65
and over.
"""

"""
We create a custom function to assign age groups depeding on the value of the
age column as specified in the task describtion.
"""

def age_group(age):
  if 18<=age<=24:
    return '18-24'
  elif 25<=age<=34:
    return '25-34'
  elif 35<=age<=44:
    return '35-44'
  elif 45<=age<=54:
    return '45-54'
  elif 55<=age<=64:
    return '55-64'
  else:
    return '65 and over'

"""
The age_group function is called in an apply function to populate the records in
the new columns
"""

APdf['age_group'] = APdf['age'].apply(age_group)

"""
Head(10) is used to get the first 10 rows of the dataset to check if everything
was done correctly
"""

APdf.head(10)

"""# **3. Subsetting/Filtering Data**

Use the filtering method to find all the respondents who have the impression that Bill Clinton
is moderate or conservative (ClinLR equals 4 or higher).

3a) How many respondents are in this subset?
"""

"""
First we create the subset of all respondents who have the impression that
Bill Clinton is moderate or conservative
"""

clintonSubSet = APdf.loc[(APdf['ClinLR'] <= 4)]

"""
The we assign a variable with the length of axes 0 which can be described as
the count of rows in the subset
"""

clintonCount = len(clintonSubSet.axes[0])

"""
The variable clintonCount is inserted in to an f-string to return the result
in a readable matter
"""

print(f"There are {clintonCount} respondents who have the impression that Bill Clinton is moderate or conservative")

"""3b) Among these respondents, how many have a household income less than $50,000 and
attended at least some college?
"""

"""
First a new subset is created to reduce the clintonSubSet to all enteries with
an income less than $50.000 and that attended at leas some college this is done
using the loc function on the lincon sub set and the "&" operator to combine the
conditions.
"""
houseHoldIncomeSubSet = clintonSubSet.loc[(clintonSubSet['income']<50000) & (clintonSubSet['education']>=4)]

"""
The we assign a variable with the length of axes 0 which can be described as the
 count of rows in the subset
"""
houseHoldIncomeSubSetCount = len(houseHoldIncomeSubSet.axes[0])

"""
The variable clintonCount is inserted in to an f-string to return the result
in a readable matter
"""

print(f"There are {houseHoldIncomeSubSetCount} respondents who have a household income less than $50,000 and attended at least some college")

"""# **4. Grouping Data Exercise**
Use the groupby() method to bucket respondents by age_group.

4a) Which age group is the most conservative?
"""

"""
We create a new variable which we assign as a data frame of all data grouped by
the average ClinLR pr group
"""

ageGroupConservatives = APdf.groupby('age_group')['ClinLR'].mean()

"""
We then assign two variables with the most conservative group and the their
avaerage ClinLR
"""

mostConservativeGroup = ageGroupConservatives.idxmax()
averageClinlr = ageGroupConservatives.max()

"""
Both variables are passed into an f-string in a print statment to print
the answer
"""

print(f"The most conservative age group is {most_conservative_group} with an average ClinLR of {average_clinlr:.2f}.")

"""4b) Which watches TV news the least?"""

"""
We create a new variable which is assigned as a data frame of all data from the
data set grouped by age group and average time spent watching TV news
"""

ageGroupTvNews = APdf.groupby('age_group')['TVnews'].mean()

"""
We assign to vairables with group with the most tie spent watching tv and the
amount of ours they spent on average
"""

mostTvWatched = ageGroupTvNews.idxmax()
averageTvNews = ageGroupTvNews.max()

"""
Both variables are passed into an f-string to provide an easy to understand answer
"""

print(f"The age group that watches TV news the least is {mostTvWatched} with an average of {averageTvNews:.2f} hours spent watching TV news.")

"""Next, calculate 5 percentile groups (i.e. quintiles) based on income. Group the dataset by
these percentiles.

4c) Which income bracket is the most liberal?

"""

"""
First we create a new column dedicated for quantiles of income in the dataset
"""

APdf['income_quantile']= pd.qcut(APdf['income'],5, labels= ["Buttom quintile", "2nd quintile", "Middle quintile", "4th quitile", "Top quitile"])

"""
Then we create a new dataframe grouped by the average of how the respodents
rated them selves on being liberal or conservative when asked pr income quantile

Observed is set to true to get rid of the warning message that is created otherwise.
"""

incomeBracketLiberalism = APdf.groupby('income_quantile', observed= True)['selfLR'].mean()

"""
We then create two variables finding the quantile with the lowest value in the
selfLR colum, as 1 indicates being very left oriented and 10 indicates being right oriented
"""

mostLiberalQuantile = incomeBracketLiberalism.idxmin()
averageLiberalism = incomeBracketLiberalism.min()

"""
Finally the answer are printed out by passing the two variables into an F-string.
"""

print(f"The income bracket that is the most liberal is the {mostLiberalQuantile} with an average selfLR of {averageLiberalism:.2f}.")

"""4d) Which is the most conservative?"""

"""
Everything in this code is the same as above. We have only changed the min()
functions into max() as the scale within the selfLR column goes from
1 (being left oriented) to 10 (being right-oriented)
"""
incomeBracketConservatism = APdf.groupby('income_quantile', observed = True)['selfLR'].mean()

mostConservativeQuantile = incomeBracketConservatism.idxmax()
averageConservatisme = incomeBracketConservatism.max()

print(f"The income bracket that is the most conservative is the {mostConservativeQuantile} with an average selfLR of {averageConservatisme:.2f}.")

"""4e)The oldest?"""

incomeBracketAge = APdf.groupby('income_quantile', observed = True)['age'].mean()

oldestQuantile = incomeBracketAge.idxmax()
averageAge = incomeBracketAge.max()

print(f"The income bracket that is the most conservative is the {oldestQuantile} with an average selfLR of {averageAge:.2f}.")

"""# **5. Understanding Voter Behavior Across the Aisle (BONUS!)**
We are interested in learning more about respondents whose political views differ strongly
from the candidate they expect to vote for. Focus on these four variables: selfLR, vote,
ClinLR, and DoleLR. Your interpretation may be different, that’s OK.

5a) What is the largest recorded difference between a respondent's political leaning and
his/her impression of their intended candidate's political leaning?
"""

"""
We create a copy of the relevant columns to ensure the original DataFrame remains unchanged.
This gives us the respondent's self-reported leaning, their vote, and their perception of both candidates.
"""
analysisdf = APdf[['selfLR', 'vote', 'ClinLR', 'DoleLR']].copy()

def leaning_analysis(row):
    """
    We calculate the absolute difference between the respondent's political leaning
    and the perceived leaning of the candidate they voted for.
    If they voted for Bill Clinton ('vote' == 0), we use 'ClinLR'; otherwise, 'DoleLR'.
    """
    return abs(row['selfLR'] - row['ClinLR']) if row['vote'] == 0 else abs(row['selfLR'] - row['DoleLR'])

"""
We apply the function to calculate differences and store them in a new column.
"""
analysisdf['diff_selfLR_vote'] = analysisdf.apply(leaning_analysis, axis=1)

"""
We find the maximum difference to identify the respondent with the largest discrepancy.
"""
max_diff = analysisdf['diff_selfLR_vote'].max()

"""
Retrieve the row corresponding to the maximum difference for further analysis.
"""
max_diff_row = analysisdf[analysisdf['diff_selfLR_vote'] == max_diff].iloc[0]

"""
Based on the vote, we determine if the respondent voted for Bill Clinton or Bob Dole.
"""
candidate_voted_for = "Bill Clinton" if max_diff_row['vote'] == 0 else "Bob Dole"

"""
Output the maximum discrepancy and which candidate the respondent voted for.
"""
print(f"The largest recorded difference between a respondent's political leaning "
      f"and their candidate's perceived leaning is {max_diff:.2f}.")
print(f"This respondent voted for {candidate_voted_for}.")

"""5b) How many respondents exhibit a difference of that magnitude?"""

# We choose to identify "this magnitude" as a difference higher than 5

highDiffRespondants = analysisdf[analysisdf['diff_selfLR_vote'] >=5]
highDiffCount = len(highDiffRespondants)

print(f"There are {highDiffCount} respondents who exhibit a difference of that magnitude.")